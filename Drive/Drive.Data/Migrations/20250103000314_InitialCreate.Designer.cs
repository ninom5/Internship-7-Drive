// <auto-generated />
using System;
using Drive.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Drive.Data.Migrations
{
    [DbContext(typeof(DriveDbContext))]
    [Migration("20250103000314_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Drive.Data.Entities.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FileId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "The SQL script looks great, but I think we could optimize it a bit for larger datasets",
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1636),
                            FileId = 1,
                            LastModifiedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1637),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "The database structure is good, but can you clarify the indexing strategy used here?",
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1643),
                            FileId = 3,
                            LastModifiedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1643),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Content = "This is a great file!",
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1645),
                            FileId = 9,
                            LastModifiedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1646),
                            UserId = 5
                        },
                        new
                        {
                            Id = 4,
                            Content = "I like the projections in this file.",
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1648),
                            FileId = 10,
                            LastModifiedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1649),
                            UserId = 5
                        });
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FolderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Files");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "insert into Users(id) Values(1)",
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1446),
                            FolderId = 1,
                            LastModifiedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1446),
                            Name = "insert.sql",
                            OwnerId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "public static class{\nint n = 1;\n}",
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1452),
                            FolderId = 5,
                            LastModifiedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1453),
                            Name = "Drive.cs",
                            OwnerId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "Create table",
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1455),
                            FolderId = 6,
                            LastModifiedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1456),
                            Name = "FitnessCenter",
                            OwnerId = 1
                        },
                        new
                        {
                            Id = 4,
                            Content = "Create table",
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1459),
                            FolderId = 6,
                            LastModifiedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1460),
                            Name = "Restaurant",
                            OwnerId = 1
                        },
                        new
                        {
                            Id = 5,
                            Content = "Bubble sort",
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1462),
                            FolderId = 7,
                            LastModifiedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1463),
                            Name = "Algorithms",
                            OwnerId = 1
                        },
                        new
                        {
                            Id = 6,
                            Content = "tree node",
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1467),
                            FolderId = 8,
                            LastModifiedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1468),
                            Name = "Strukture podataka",
                            OwnerId = 2
                        },
                        new
                        {
                            Id = 7,
                            Content = "Bench 3x15 - 100kg\n Deadlifts 2x10",
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1470),
                            FolderId = 9,
                            LastModifiedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1471),
                            Name = "Training of strength",
                            OwnerId = 3
                        },
                        new
                        {
                            Id = 8,
                            Content = "30min",
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1473),
                            FolderId = 9,
                            LastModifiedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1474),
                            Name = "Cardio",
                            OwnerId = 3
                        },
                        new
                        {
                            Id = 9,
                            Content = "Research on AI and Data Structures",
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1476),
                            FolderId = 12,
                            LastModifiedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1477),
                            Name = "ResearchPapers.pdf",
                            OwnerId = 5
                        },
                        new
                        {
                            Id = 10,
                            Content = "Important personal notes",
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1481),
                            FolderId = 13,
                            LastModifiedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1481),
                            Name = "PersonalNotes.txt",
                            OwnerId = 5
                        });
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentFolderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentFolderId");

                    b.ToTable("Folders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1355),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Root Folder",
                            OwnerId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1361),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Root Folder",
                            OwnerId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1363),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Root Folder",
                            OwnerId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1365),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Root Folder",
                            OwnerId = 4
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1368),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Projects",
                            OwnerId = 1,
                            ParentFolderId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1372),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Database",
                            OwnerId = 1,
                            ParentFolderId = 5
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1374),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "College",
                            OwnerId = 1,
                            ParentFolderId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1376),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "FESB",
                            OwnerId = 2,
                            ParentFolderId = 2
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1379),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Training",
                            OwnerId = 3,
                            ParentFolderId = 3
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1383),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Basketball Training",
                            OwnerId = 4,
                            ParentFolderId = 4
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1385),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Root Folder",
                            OwnerId = 5
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1387),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Research",
                            OwnerId = 5,
                            ParentFolderId = 11
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1389),
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Personal",
                            OwnerId = 5,
                            ParentFolderId = 11
                        });
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.SharedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("ItemType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SharedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SharedById")
                        .HasColumnType("integer");

                    b.Property<int>("SharedWithId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("SharedById");

                    b.HasIndex("SharedWithId");

                    b.ToTable("SharedItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ItemId = 5,
                            ItemType = 0,
                            SharedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1581),
                            SharedById = 1,
                            SharedWithId = 2
                        },
                        new
                        {
                            Id = 2,
                            ItemId = 3,
                            ItemType = 1,
                            SharedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1585),
                            SharedById = 1,
                            SharedWithId = 2
                        },
                        new
                        {
                            Id = 3,
                            ItemId = 4,
                            ItemType = 1,
                            SharedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1588),
                            SharedById = 1,
                            SharedWithId = 2
                        },
                        new
                        {
                            Id = 4,
                            ItemId = 6,
                            ItemType = 1,
                            SharedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1590),
                            SharedById = 2,
                            SharedWithId = 1
                        },
                        new
                        {
                            Id = 5,
                            ItemId = 7,
                            ItemType = 1,
                            SharedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1592),
                            SharedById = 3,
                            SharedWithId = 4
                        },
                        new
                        {
                            Id = 6,
                            ItemId = 8,
                            ItemType = 1,
                            SharedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1596),
                            SharedById = 3,
                            SharedWithId = 5
                        },
                        new
                        {
                            Id = 7,
                            ItemId = 9,
                            ItemType = 1,
                            SharedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1598),
                            SharedById = 5,
                            SharedWithId = 3
                        });
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1125),
                            Email = "ante@gmail.com",
                            HashedPassword = new byte[] { 122, 89, 55, 159, 97, 165, 243, 126, 178, 86, 67, 235, 147, 97, 141, 112, 87, 128, 185, 121, 194, 211, 234, 95, 120, 103, 190, 181, 41, 26, 168, 254, 131, 161, 107, 172, 238, 129, 19, 114, 11, 151, 62, 190, 0, 194, 139, 130, 177, 212, 191, 8, 254, 115, 16, 56, 46, 192, 96, 254, 254, 53, 120, 167 },
                            Name = "Ante",
                            Password = "ante123",
                            Surname = "Antic"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1166),
                            Email = "mate@gmail.com",
                            HashedPassword = new byte[] { 73, 113, 152, 34, 172, 33, 62, 225, 188, 192, 152, 87, 138, 5, 57, 222, 211, 30, 164, 62, 229, 147, 168, 225, 215, 53, 176, 134, 210, 18, 201, 129, 35, 204, 147, 183, 210, 138, 74, 198, 105, 168, 206, 94, 227, 3, 217, 24, 203, 199, 125, 245, 78, 87, 104, 28, 62, 131, 4, 143, 182, 89, 121, 19 },
                            Name = "Mate",
                            Password = "mate123",
                            Surname = "Matic"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1192),
                            Email = "jonjones@gmail.com",
                            HashedPassword = new byte[] { 129, 57, 95, 117, 145, 114, 216, 10, 184, 63, 131, 92, 12, 83, 70, 101, 164, 212, 186, 141, 64, 64, 142, 63, 194, 180, 122, 230, 196, 113, 21, 112, 116, 90, 81, 205, 17, 249, 173, 14, 158, 220, 194, 37, 219, 176, 245, 84, 32, 148, 164, 218, 243, 201, 37, 56, 91, 178, 66, 185, 77, 138, 91, 56 },
                            Name = "Jon",
                            Password = "jonjones123",
                            Surname = "Jones"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1217),
                            Email = "curry@gmail.com",
                            HashedPassword = new byte[] { 79, 183, 97, 195, 214, 222, 118, 180, 185, 78, 163, 125, 171, 143, 196, 19, 31, 28, 159, 118, 86, 90, 67, 11, 109, 42, 179, 198, 74, 142, 193, 35, 239, 67, 167, 47, 132, 38, 4, 98, 61, 186, 13, 170, 224, 148, 72, 192, 64, 213, 127, 68, 33, 117, 208, 57, 159, 165, 215, 92, 65, 32, 245, 179 },
                            Name = "Steph",
                            Password = "curry123",
                            Surname = "Curry"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 1, 3, 0, 3, 13, 294, DateTimeKind.Utc).AddTicks(1240),
                            Email = "luka@basketball.com",
                            HashedPassword = new byte[] { 111, 88, 198, 77, 1, 224, 216, 125, 20, 127, 13, 7, 199, 241, 184, 30, 221, 6, 31, 141, 149, 92, 142, 120, 185, 16, 180, 186, 54, 238, 85, 236, 178, 76, 168, 229, 205, 147, 171, 75, 245, 202, 205, 177, 64, 169, 128, 48, 177, 79, 3, 82, 68, 73, 147, 196, 91, 54, 128, 30, 69, 178, 235, 184 },
                            Name = "Luka",
                            Password = "luka123",
                            Surname = "Dončić"
                        });
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.Comment", b =>
                {
                    b.HasOne("Drive.Data.Entities.Models.File", "File")
                        .WithMany("Comments")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drive.Data.Entities.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.File", b =>
                {
                    b.HasOne("Drive.Data.Entities.Models.Folder", "Folder")
                        .WithMany("Files")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drive.Data.Entities.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.Folder", b =>
                {
                    b.HasOne("Drive.Data.Entities.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drive.Data.Entities.Models.Folder", "ParentFolder")
                        .WithMany("Subfolders")
                        .HasForeignKey("ParentFolderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Owner");

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.SharedItem", b =>
                {
                    b.HasOne("Drive.Data.Entities.Models.File", "File")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Drive.Data.Entities.Models.Folder", "Folder")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Drive.Data.Entities.Models.User", "SharedBy")
                        .WithMany()
                        .HasForeignKey("SharedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drive.Data.Entities.Models.User", "SharedWith")
                        .WithMany()
                        .HasForeignKey("SharedWithId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Folder");

                    b.Navigation("SharedBy");

                    b.Navigation("SharedWith");
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.File", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.Folder", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Subfolders");
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.User", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
